%Git学习笔记：

1,   可以直接进入某个文件夹，然后打开Git Bash，然后使用 mkdir learngit（文件名）直接在此文件夹建立一个新的文件夹。
2，  cd learngit(进入learngit文件夹)。
3，  pwd （显示当前目录）。
4，  git init命令把这个目录变成Git可以管理的仓库。
5，  在learngit 文件夹新建 readme.txt 文档
     git add readme.txt 告诉Git，把文件添加到仓库。
6，  git commit -m "wrote a readme file" 告诉Git，把文件提交到仓库。
7，  git status 命令可以让我们时刻掌握仓库当前的状态。
8，  git diff readme.txt 看看具体修改了什么内容。
9，  git log 告诉我们版本库的所有版本每次修改的信息。
10， git log --pretty=oneline 如果嫌输出信息太多，看得眼花缭乱使用。
11， git reset --hard HEAD^ 把版本退回到上一个版本。
12， cat readme.txt 查看当前版本内容。
13， git reset --hard 1094a（版本号）指定回到某个版本。
14， git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）
15， git checkout -- readme.txt 可以丢弃工作区的修改。
16， git reset HEAD readme.txt 可以把暂存区的修改撤销掉（unstage），重新放回工作区
17， rm readme.txt 通常直接在文件管理器中把没用的文件删了。
18， git rm test.txt 从版本库中删除该文件。

￥远程仓库

在GitHub上创建一个仓库后
1，git remote add origin git@github.com:LegendaryKun/learngit.git 把一个已有的本地仓库与之关联（库名一样）。
2，git push -u origin master   把本地库的所有内容推送到远程库上。
使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。
3，git push origin master   本地首次提交之后的可以直接使用此命令把本地master分支的最新修改推送至GitHub。
4，git clone git@github.com:LegendaryKun/gitskills.git  把远程库gitskills克隆到本地。
5，ls 列出当前文件夹（库）中的文件。

￥分支管理
查看分支：     			git branch

创建分支：			    git branch <name>

切换分支：				git checkout <name>

创建+切换分支：			git checkout -b <name>

合并某分支到当前分支：	git merge <name>

删除分支：				git branch -d <name>

查看分支合并图          git log --graph --pretty=oneline --abbrev-commit

￥

git merge --no-ff -m "merge with no-ff" dev  强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，
											，这样，从分支历史上就可以看出分支信息
											，请注意--no-ff参数，表示禁用Fast forward。
，合并要创建一个新的commit，所以加上-m参数，把commit描述写进去

git stash 把当前工作现场“储藏”起来，等以后恢复现场后继续工作。

git stash list   查看刚才的工作现场存到哪去。

git stash apply stash@{0} 你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash。

git stash apply  恢复，但是恢复后，stash内容并不删除，你需要用
git stash drop   来删除。

git stash pop    恢复的同时把stash内容也删了。

git branch -D <name>  如果要丢弃一个没有被合并过的分支，强行删除。

多人协作：
git remote -v  查看远程库信息。

本地新建的分支如果不推送到远程，对其他人就是不可见的。

git push origin branch-name 本地推送分支，如果推送失败，先用git pull抓取远程的新提交。

git checkout -b branch-name origin/branch-name  在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致。

git branch --set-upstream-to=origin/branch-name branch-name  建立本地分支和远程分支的关联,在本地合并。

git pull 从远程抓取分支，如果有冲突，要先处理冲突。


rebase  操作可以把本地未push的分叉提交历史整理成直线
        ，目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。


￥标签管理
git tag <name>  就可以打一个新标签。

git tag v0.9 f52c633  提交历史提交的commit id。

git tag        查看所有标签。

git show <tagname>   查看标签信息。

git tag -a v0.1 -m "version 0.1 released" 1094adb  可以创建带有说明的标签，用-a指定标签名，-m指定说明文字。

git push origin <tagname>   可以推送一个本地标签。

git push origin --tags      可以推送全部未推送过的本地标签。

git tag -d <tagname>        可以删除一个本地标签。

git push origin :refs/tags/<tagname>   可以删除一个远程标签。

￥配置别名
git config --global alias.st status   st就表示status。

--global 参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

甚至还有人丧心病狂地把lg配置成了：
git config --global alias.lg "log --color --graph --pretty=format:
'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"。

